generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  notes               Note[]
  password            Password?
  organizations       UsersOnOrganizations[]
  wishesVolunteered   UsersOnWishVolunteers[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task[]
  wish      Wish[]
}

model Task {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  noteId    String?
  note      Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model Product {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sku            String           @unique
  model          String
  description    String
  image          String
  category       String
  size           String
  stock          Int
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  variants       ProductVariant[]
}

model ProductVariant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sku       String   @unique
  size      String
  stock     Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

model Organization {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  slug        String                 @unique
  name        String
  description String?
  image       String?
  category    String?
  products    Product[]
  users       UsersOnOrganizations[]
}

model UsersOnOrganizations {
  userId         String
  organizationId String
  assignedAt     DateTime     @default(now())
  assignedBy     String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model Wish {
  id          String   @id @default(cuid())
  title       String
  body        String
  exampleUrls String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  noteId      String?
  note        Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  volunteers  UsersOnWishVolunteers[]
}

model UsersOnWishVolunteers {
  userId         String
  wishId         String
  assignedAt     DateTime     @default(now())
  assignedBy     String
  wish           Wish         @relation(fields: [wishId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([wishId, userId])
}