datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]

  organizations   UsersOnOrganizations[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  
  task    Task[]
}

model Task {
  id    String @id @default(cuid())
  title String
  body  String
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String?
}

model Product {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sku             String            @unique
  model           String
  description     String
  image           String
  category        String
  size            String
  stock           Int
  variants        ProductVariant[]
  organization    Organization      @relation(fields: [organizationId], references: [id])
  organizationId  String            
}

model ProductVariant {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sku             String            @unique
  size            String
  stock           Int
  product         Product           @relation(fields: [productId], references: [id])
  productId       String
}

model Organization {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  slug        String              @unique
  name        String
  description String?
  image       String?
  category    String?
  products    Product[]
  users   UsersOnOrganizations[]
}

model UsersOnOrganizations {
  user            User     @relation(fields: [userId], references: [id])
  userId          String // relation scalar field (used in the `@relation` attribute above)
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String // relation scalar field (used in the `@relation` attribute above)
  assignedAt      DateTime @default(now())
  assignedBy      String

  @@id([userId, organizationId])
}